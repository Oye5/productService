package com.product.controller;

import io.searchbox.client.JestClient;
import io.searchbox.core.Index;

import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.UUID;

import org.elasticsearch.common.geo.GeoPoint;
import org.joda.time.DateTime;
import org.joda.time.DateTimeZone;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.multipart.MultipartFile;

import com.product.dto.request.ProductSaveRequest;
import com.product.dto.request.ProductUpdateRequest;
import com.product.dto.response.GenericResponse;
import com.product.dto.response.ProductGenericResponse;
import com.product.model.Geo;
import com.product.model.Product;
import com.product.model.ProductChat;
import com.product.model.ProductImages;
import com.product.model.Seller;
import com.product.model.ThumbNail;
import com.product.model.User;
import com.product.service.FavouriteProductService;
import com.product.service.GeoService;
import com.product.service.ProductChatService;
import com.product.service.ProductConversationsService;
import com.product.service.ProductImageService;
import com.product.service.ProductService;
import com.product.service.ProductStatusService;
import com.product.service.ProductTransactionService;
import com.product.service.SellerService;
import com.product.service.ThumbNailService;
import com.product.util.ElasticUtil;
import com.product.util.ImageUploadUtil;

@RestController
public class ProductController {

	@Autowired
	private ProductService productService;

	@Autowired
	private GeoService geoService;

	@Autowired
	private SellerService sellerService;

	@Autowired
	private ImageUploadUtil imageUploadUtil;

	@Autowired
	private ProductImageService productImageService;

	@Autowired
	private ThumbNailService thumbNailService;

	@Autowired
	private ProductStatusService productStatusService;

	@Autowired
	private FavouriteProductService favouriteProductService;

	@Autowired
	private ProductChatService chatService;

	@Autowired
	private ProductConversationsService convService;

	@Autowired
	private ProductTransactionService productTransactionService;

	/**
	 * save product
	 * 
	 * @param productRequest
	 * @return
	 */
	@RequestMapping(value = "/saveProducts", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<?> saveProducts(@RequestParam("image") MultipartFile[] file, ProductSaveRequest productSaveRequest) {
		GenericResponse response = new GenericResponse();
		ProductGenericResponse productGenericResponse = new ProductGenericResponse();
		// check language code
		if (productSaveRequest.getLanguageCode().isEmpty() || productSaveRequest.getLanguageCode().length() != 2 || productSaveRequest.getLanguageCode().equals(productSaveRequest.getLanguageCode().toLowerCase())) {
			response.setCode("v001");
			response.setMessage("please pass Language code  in upper case like US");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.EXPECTATION_FAILED);
		}
		// check category id
		if (productSaveRequest.getCountry().isEmpty() || productSaveRequest.getCountry().length() != 2 || productSaveRequest.getCountry().equals(productSaveRequest.getLanguageCode().toLowerCase())) {
			response.setCode("v002");
			response.setMessage("please pass country code in upper case like US");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.EXPECTATION_FAILED);
		}
		// check category id
		if (productSaveRequest.getCategoryId() < 0 || productSaveRequest.getCategoryId() > 8) {
			response.setCode("V003");
			response.setMessage("category id not valid.category id must in between 0 to 8");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.EXPECTATION_FAILED);
		}
		String autoGeneratedproductId = null;
		if (productSaveRequest.getProductId() == null || productSaveRequest.getProductId().equals("")) {
			autoGeneratedproductId = UUID.randomUUID().toString();
		} else {
			autoGeneratedproductId = productSaveRequest.getProductId();
		}
		try {
			Product product = new Product();
			Geo geo = new Geo();
			User user = new User();

			geo.setGeo_id(UUID.randomUUID().toString());
			geo.setLattitude(productSaveRequest.getLattitude());
			geo.setLongitude(productSaveRequest.getLongitude());
			geo.setCity(productSaveRequest.getCity());
			geo.setCountryCode(productSaveRequest.getCountry());
			geo.setZipCode(productSaveRequest.getZipCode());

			GeoPoint gp = new GeoPoint(productSaveRequest.getLattitude(), productSaveRequest.getLongitude());
			product.setLocation(gp);

			// if (productRequest.getGeoId() != 0) {
			// geo.setGeo_id(productRequest.getGeoId());
			// product.setGeo(geo);
			// }
			geoService.saveGeoDetails(geo);
			product.setGeo(geo);
			if (productSaveRequest.getSellerId() != null) {
				user.setUserId(productSaveRequest.getSellerId());
				product.setUser(user);
			}

			product.setCategoryId(productSaveRequest.getCategoryId());
			product.setCondition(productSaveRequest.getCondition());
			product.setCurrency(productSaveRequest.getCurrency());
			product.setDescription(productSaveRequest.getDescription());
			product.setDisplayName(productSaveRequest.getDisplayName());
			product.setLanguageCode(productSaveRequest.getLanguageCode());
			product.setPrice(productSaveRequest.getPrice());
			product.setProductId(autoGeneratedproductId);
			product.setStatus(productSaveRequest.getStatus());
			product.setBrand(productSaveRequest.getBrand());
			product.setWarranty(productSaveRequest.getWarranty());
			DateTime createdAt = new DateTime(new Date().getTime(), DateTimeZone.forID(null));
			product.setCreatedAt(createdAt.toString());
			DateTime updatedAt = new DateTime(new Date().getTime(), DateTimeZone.forID(null));
			product.setUpdatedAt(updatedAt.toString());
			product.setQuantity(productSaveRequest.getQuantity());
			String productId = productService.saveProduct(product);

			// save seller check seller is exist or not if not then save
			Seller seller = sellerService.getSellerById(productSaveRequest.getSellerId());
			if (seller == null) {
				seller = new Seller();
				seller.setId(productSaveRequest.getSellerId());
				seller.setActive(1);
				seller.setUserId(user);
				sellerService.saveSeller(seller);
			}

			// upload image
			List<String> keyList = null;
			if (file.length != 0) {
				keyList = imageUploadUtil.uploadImage(file, autoGeneratedproductId);
				productGenericResponse.setImagekeyList(keyList);
			} else {
				keyList = new ArrayList<String>();
			}
			// save image to db directy withoutuploading to s3
			if (productSaveRequest.getImageList().size() != 0) {
				ProductImages productImages = new ProductImages();
				for (int i = 0; i < productSaveRequest.getImageList().size(); i++) {
					productImages = new ProductImages();
					productImages.setId(UUID.randomUUID().toString());

					productImages.setProductId(product);
					productImages.setUrl(productSaveRequest.getImageList().get(i));
					// productImages.setThumbNail(key+"_thumb.jpg");
					productImageService.saveUploadedImage(productImages);
				}
				if (file.length == 0) {
					ThumbNail thumb = new ThumbNail();
					thumb.setId(UUID.randomUUID().toString());
					thumb.setHeight(140);
					thumb.setWidth(90);
					thumb.setProductId(product);
					thumb.setUrl(productSaveRequest.getThumbUrl());
					thumbNailService.saveThumbNail(thumb);
					productGenericResponse.setThumb_nail(productSaveRequest.getThumbUrl());
				}
				keyList.addAll(productSaveRequest.getImageList());

			}

			// Product p = new Product();
			// p.setProductId(productId);

			// Index to elastic
			JestClient client = ElasticUtil.getClient();
			Index index = new Index.Builder(product).index("product").type("Product").id(product.getProductId().toString()).build();
			client.execute(index);
			productGenericResponse.setImagekeyList(keyList);
			productGenericResponse.setCode("S001");
			productGenericResponse.setProductId(productId);

			productGenericResponse.setMessage("Product saved sucessfully");

			return new ResponseEntity<ProductGenericResponse>(productGenericResponse, HttpStatus.OK);

		} catch (org.springframework.dao.DataIntegrityViolationException e) {
			e.printStackTrace();
			response.setCode("E001");
			// response.setMessage("please provde unique ProductId. given productId is already registered");
			response.setMessage(e.getMessage());

			return new ResponseEntity<GenericResponse>(response, HttpStatus.CONFLICT);
		} catch (org.apache.http.conn.HttpHostConnectException ex) {
			ex.printStackTrace();
			response.setCode("E002");
			response.setMessage(ex.getMessage());
			return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);
		} catch (Exception ex) {
			ex.printStackTrace();
			response.setCode("E003");
			response.setMessage(ex.getMessage());
			return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);
		}

	}

	/**
	 * update product details
	 * 
	 * @param productId
	 * @param productUpdateRequest
	 * @return
	 */
	@RequestMapping(value = "/v1/{productId}/update", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<GenericResponse> updateProducts(@PathVariable("productId") String productId, @RequestBody ProductUpdateRequest productUpdateRequest) {
		GenericResponse response = new GenericResponse();

		// check language code
		if (productUpdateRequest.getLanguage_code().isEmpty() || productUpdateRequest.getLanguage_code().length() != 2 || productUpdateRequest.getLanguage_code().equals(productUpdateRequest.getLanguage_code().toLowerCase())) {
			response.setCode("v001");
			response.setMessage("please pass Language code  in upper case like US");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.EXPECTATION_FAILED);
		}
		// check country code
		if (productUpdateRequest.getGeo().getCountry_code().isEmpty() || productUpdateRequest.getGeo().getCountry_code().length() != 2 || productUpdateRequest.getGeo().getCountry_code().equals(productUpdateRequest.getGeo().getCountry_code().toLowerCase())) {
			response.setCode("v002");
			response.setMessage("please pass country code in  upper case like US");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.EXPECTATION_FAILED);
		}
		// category id validation
		if (productUpdateRequest.getCategory_id() < 0 || productUpdateRequest.getCategory_id() > 8) {
			response.setCode("V003");
			response.setMessage("category id not valid. category id must in between 0 to 8");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.EXPECTATION_FAILED);
		}
		try {
			Product product = null;
			List<Product> productList = productService.getProductByProductId(productId);
			if (productList.size() != 0) {
				product = productList.get(0);
			} else {
				response.setCode("E001");
				response.setMessage("productid not valid");
				return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);
			}

			// seller details
			Seller seller = new Seller();
			seller.setId(productUpdateRequest.getSeller().getId());
			User user = new User();
			user.setUserId(productUpdateRequest.getSeller().getId());
			seller.setUserId(user);
			seller.setBanned(productUpdateRequest.getSeller().getBanned());
			seller.setCity(productUpdateRequest.getSeller().getCity());
			seller.setCountryCode(productUpdateRequest.getSeller().getCountry_code());
			seller.setProfilePic(productUpdateRequest.getSeller().getProfile_pic_url());
			seller.setStatus(productUpdateRequest.getSeller().getStatus());
			seller.setZipCode(productUpdateRequest.getSeller().getZip_code());
			seller.setFirstName(productUpdateRequest.getSeller().getName());
			try {
				sellerService.updateSeller(seller);
			} catch (Exception e) {
				response.setCode("E001");
				response.setMessage("seller id not found: " + e.getMessage());
				e.printStackTrace();
				return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);
			}
			product.setProductId(productId);
			product.setCategoryId(productUpdateRequest.getCategory_id());
			product.setCondition(productUpdateRequest.getCondition());
			product.setCurrency(productUpdateRequest.getCurrency());
			product.setDescription(productUpdateRequest.getDescription());
			product.setDisplayName(productUpdateRequest.getDisplay_name());
			product.setQuantity(productUpdateRequest.getQuantity());
			Geo geo = new Geo();
			geo.setGeo_id(product.getGeo().getGeo_id());
			geo.setCity(productUpdateRequest.getGeo().getCity());
			geo.setCountryCode(productUpdateRequest.getGeo().getCountry_code());
			geo.setLattitude(productUpdateRequest.getGeo().getLat());
			geo.setLongitude(productUpdateRequest.getGeo().getLongitude());
			geo.setZipCode(productUpdateRequest.getGeo().getZip_code());
			geoService.updateGeo(geo);

			GeoPoint gp = new GeoPoint(productUpdateRequest.getGeo().getLat(), productUpdateRequest.getGeo().getLongitude());
			product.setLocation(gp);

			product.setGeo(geo);
			product.setLanguageCode(productUpdateRequest.getLanguage_code());
			product.setPrice(productUpdateRequest.getPrice());
			product.setStatus(productUpdateRequest.getStatus());
			DateTime updatedAt = new DateTime(productUpdateRequest.getUpdatedAt(), DateTimeZone.forID(null));

			product.setUpdatedAt(updatedAt.toString());
			user = new User();
			user.setUserId(productUpdateRequest.getSeller().getId());
			product.setUser(user);

			// set image details to Imageclass and save to database
			ProductImages productImages = new ProductImages();
			productImages.setId(productUpdateRequest.getImages().getId());
			productImages.setUrl(productUpdateRequest.getImages().getUrl());
			productImages.setProductId(product);
			try {
				productImageService.updateImageDetails(productImages);
			} catch (Exception e) {
				response.setCode("E002");
				response.setMessage("image id not found: " + e.getMessage());
				e.printStackTrace();
				return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);
			}
			productService.updateProduct(product);
			// Index to elastic
			JestClient client = ElasticUtil.getClient();
			Index index = new Index.Builder(product).index("product").type("Product").id(product.getProductId().toString()).build();
			client.execute(index);

			response.setCode("S001");
			response.setMessage("product modified sucessfully");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.OK);
		} catch (Exception e) {
			response.setCode("E003");
			response.setMessage(e.getMessage());
			e.printStackTrace();
			return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);
		}

	}

	/**
	 * delete product from product table and also from the elastic search
	 * 
	 * @param productId
	 * @return
	 */
	@RequestMapping(value = "/v1/{productId}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	public ResponseEntity<GenericResponse> deleteProducts(@PathVariable("productId") String productId) {
		GenericResponse response = new GenericResponse();
		try {
			Product product = new Product();
			product.setProductId(productId);

			// delete product_status table on the basis of productId
			productStatusService.deleteProductStatus(productId);

			// delete product_images table based on productID
			productImageService.deleteProductImages(productId);

			// delete thumbnail
			thumbNailService.deleteThumbNail(productId);

			// delete favourite product
			favouriteProductService.deleteFavouriteProduct(productId);

			List<ProductChat> list = chatService.getChatIdByProductId(productId);
			System.out.println("===list11t===" + list);
			// delete from conversations
			System.out.println("lisoso====" + list);
			convService.deleteConversations(list);
			// delete chat messages
			chatService.deleteChatMessages(productId);

			// delete from product-tansaction
			productTransactionService.deleteProductTransaction(productId);
			// delect product from product table
			productService.deleteProduct(product);

			// Delete from Elastic Index
			JestClient client = ElasticUtil.getClient();
			Index index = new Index.Builder(product).index("product").type("Product").id(product.getProductId().toString()).build();
			client.execute(index);
			response.setCode("S002");
			response.setMessage("Product deleted successfully");
			return new ResponseEntity<GenericResponse>(response, HttpStatus.OK);
		} catch (Exception e) {
			response.setCode("E001");
			response.setMessage(e.getMessage());
			e.printStackTrace();
			return new ResponseEntity<GenericResponse>(response, HttpStatus.BAD_REQUEST);

		}

	}

}
